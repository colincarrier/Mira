=== VERIFY: Local vs GitHub colincarrier/Mira@main ===
Time: 2025-08-08T23:54:26+00:00

---- server/routes.ts ----
[DIFF vs GitHub]
--- local:server/routes.ts
+++ github:server/routes.ts
@@ -2610,40 +2610,46 @@
     }
   });
 
-  // Unified handler for POST/PATCH /api/notes/:id
-  async function saveNoteHandler(req: Request, res: Response) {
+  // POST route for note updates (handles TipTap editor saves and prevents cache corruption)
+  app.post("/api/notes/:id", async (req, res) => {
     try {
-      const id = Number(req.params.id);
-      if (Number.isNaN(id)) return res.status(400).json({ error: "Bad id" });
+      const noteId = parseInt(req.params.id);
+      const updates = req.body || {};
       
-      const body = req.body ?? {};
-      const content = Object.prototype.hasOwnProperty.call(body, "content") ? body.content : undefined;
-      const doc_json = Object.prototype.hasOwnProperty.call(body, "doc_json") ? body.doc_json : undefined;
+      // Update the note in database
+      const updatedNote = await storage.updateNote(noteId, updates);
       
-      if (content == null && doc_json == null) {
-        // Return current note to avoid 500s and cache poisoning
-        const current = await storage.getNote(id);
-        if (!current) return res.status(404).json({ error: "Not found" });
-        res.setHeader("Content-Type", "application/json");
-        return res.json(current);
+      if (!updatedNote) {
+        return res.status(404).json({ error: "Note not found" });
       }
       
-      const updated = await storage.updateNote(id, { content, doc_json });
-      if (!updated) return res.status(404).json({ error: "Not found" });
-      
-      res.setHeader("Content-Type", "application/json");
-      return res.json(updated);
-    } catch (e) {
-      console.error("[saveNoteHandler]", e);
-      return res.status(500).json({ error: "Failed to save" });
+      res.json(updatedNote);
+    } catch (error) {
+      console.error("Error updating note via POST:", error);
+      res.status(500).json({ error: "Failed to update note" });
     }
-  }
+  });
+
+  /**
+   * Authoritative save-endpoint.
+   * Accepts *either* plain-text `content` *or* TipTap `doc_json` (or both).
+   * Any other keys are ignored on purpose.
+   * Always returns 200 + JSON (never HTML).
+   */
+  app.patch("/api/notes/:id", async (req, res) => {
+    const id = Number(req.params.id);
+    if (Number.isNaN(id)) return res.status(400).json({ error: 'Bad id' });
 
-  // POST route for note updates (unified handler)
-  app.post("/api/notes/:id", saveNoteHandler);
+    const { content, doc_json } = req.body ?? {};
+    if (content == null && doc_json == null)
+      return res.status(400).json({ error: 'Nothing to save' });
 
-  // PATCH route for note updates (unified handler)
-  app.patch("/api/notes/:id", saveNoteHandler);
+    const updated = await storage.updateNote(id, { content, doc_json });
+    if (!updated) return res.status(404).json({ error: 'Not found' });
+
+    res.setHeader('Content-Type', 'application/json');
+    res.json(updated);              // <-- ALWAYS JSON, never HTML
+  });
 
   // Todos endpoints
   app.get("/api/todos", async (req, res) => {

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
389:   389	  app.post("/api/notes/:id/v3-process", async (req, res) => {
506:   506	  app.post("/api/notes/:id/patch", async (req, res) => {
1531:  1531	  app.post("/api/notes/:id/evolve", async (req: Request, res: Response): Promise<void> => {
2643:  2643	  app.post("/api/notes/:id", saveNoteHandler);
2646:  2646	  app.patch("/api/notes/:id", saveNoteHandler);
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
  - /patch URL usage:
506:   506	  app.post("/api/notes/:id/patch", async (req, res) => {

---- server/storage.ts ----
[DIFF vs GitHub]

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
122:   122	  updateNote: async (
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
  - /patch URL usage:

---- server/sse/connectionManager.ts ----
[DIFF vs GitHub]

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
  - /patch URL usage:

---- client/src/components/activity-feed.tsx ----
[DIFF vs GitHub]
--- local:client/src/components/activity-feed.tsx
+++ github:client/src/components/activity-feed.tsx
@@ -25,7 +25,7 @@
   const { data: notes, isLoading, error, refetch, dataUpdatedAt } = useQuery<NoteWithTodos[]>({
     queryKey: queryKeys.notes.all,
     staleTime: 1000, // 1 second cache for immediate updates
-    gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes instead of 10 seconds
+    gcTime: 10000, // Keep in cache for 10 seconds only
     refetchOnWindowFocus: true,
     refetchOnMount: true,
     refetchInterval: false,
@@ -117,8 +117,7 @@
           <button 
             onClick={() => {
               console.log('[ActivityFeed] Force refetch triggered');
-              queryClient.invalidateQueries({ queryKey: queryKeys.notes.all });
-              queryClient.refetchQueries({ queryKey: queryKeys.notes.all });
+              queryClient.removeQueries({ queryKey: queryKeys.notes.all });
               refetch();
             }} 
             className="mt-2 px-3 py-1 bg-gray-200 text-gray-700 rounded text-xs"

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
27:    27	    staleTime: 1000, // 1 second cache for immediate updates
28:    28	    gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes instead of 10 seconds
31:    31	    refetchInterval: false,
120:   120	              queryClient.invalidateQueries({ queryKey: queryKeys.notes.all });
  - /patch URL usage:

---- client/src/pages/note-detail.tsx ----
[DIFF vs GitHub]
--- local:client/src/pages/note-detail.tsx
+++ github:client/src/pages/note-detail.tsx
@@ -316,17 +316,12 @@
     async (doc: JSONContent, steps: Step[]) => {
       // Guard against empty payload to prevent HTML caching
       if (!doc && steps?.length === 0) return;
-      if (!note?.id) return;
       
-      try {
-        await saveMutation.mutateAsync({
-          id: note.id,
-          docJson: doc,
-          source: 'editor'
-        });
-      } catch (e) {
-        console.error('[editor commit]', e);
-      }
+      saveMutation.mutate({
+        id: note?.id || Number(id),
+        docJson: doc,
+        source: 'editor'
+      });
 
       // 2) Extract & persist tasks
       try {
@@ -342,7 +337,7 @@
         console.error('[tasks]', err);
       }
     },
-    [id, note?.id, saveMutation]
+    [id, note?.id]
   );
 
   // Subscribe to SSE updates
@@ -948,8 +943,11 @@
                       setSaveStatus('saving');
                       try {
                         await saveMutation.mutateAsync({ id: note.id, content: editedContent, source: 'textarea' });
+                        setSaveStatus('saved');
+                        setTimeout(() => setSaveStatus('idle'), 2000);
                       } catch (error) {
-                        console.error('[onBlur save]', error);
+                        console.error('Failed to save:', error);
+                        setSaveStatus('dirty');
                       } finally {
                         setIsSaving(false);
                       }

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
195:   195	    refetchInterval: (query) => {
248:   248	      qc.invalidateQueries({ queryKey: queryKeys.notes.all });       // list
393:   393	        queryClient.invalidateQueries({ queryKey: queryKeys.notes.detail(Number(id)) });
408:   408	      queryClient.invalidateQueries({ queryKey: queryKeys.notes.detail(Number(id)) });
423:   423	      queryClient.invalidateQueries({ queryKey: queryKeys.notes.detail(Number(id)) });
440:   440	      queryClient.invalidateQueries({ queryKey: queryKeys.notes.detail(Number(id)) });
551:   551	      await queryClient.invalidateQueries({ queryKey: queryKeys.notes.detail(Number(id)) });
552:   552	      await queryClient.invalidateQueries({ queryKey: queryKeys.notes.all });
553:   553	      await queryClient.invalidateQueries({ queryKey: queryKeys.todos.all });
1145:  1145	                                    queryClient.invalidateQueries({ queryKey: queryKeys.notes.detail(Number(id)) });
1463:  1463	          queryClient.invalidateQueries({ queryKey: queryKeys.todos.all });
  - /patch URL usage:

---- client/src/hooks/useFlushQueue.ts ----
[DIFF vs GitHub]

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
  - /patch URL usage:

---- client/src/hooks/use-realtime-updates.ts ----
[DIFF vs GitHub]
--- local:client/src/hooks/use-realtime-updates.ts
+++ github:client/src/hooks/use-realtime-updates.ts
@@ -41,14 +41,8 @@
               
             case 'note_created':
               console.log('[RealTime] Note created:', data.noteId);
-              // Add note to cache optimistically without refetch
-              queryClient.setQueryData(queryKeys.notes.all, (old: any) => {
-                if (!old) return data.noteData ? [data.noteData] : [];
-                if (data.noteData && !old.find((n: any) => n.id === data.noteData.id)) {
-                  return [data.noteData, ...old];
-                }
-                return old;
-              });
+              // Immediately invalidate notes query to show new note
+              queryClient.invalidateQueries({ queryKey: queryKeys.notes.all });
               break;
               
             case 'note_updated':

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
67:    67	              queryClient.invalidateQueries({ queryKey: queryKeys.notes.all });
69:    69	                queryClient.invalidateQueries({ queryKey: queryKeys.notes.detail(data.noteId) });
  - /patch URL usage:

---- client/src/hooks/useEnhancementSocket.ts ----
[DIFF vs GitHub]

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
27:    27	          qc.invalidateQueries({ queryKey: queryKeys.notes.detail(noteId) });
28:    28	          qc.invalidateQueries({ queryKey: queryKeys.notes.all });
  - /patch URL usage:

---- client/src/utils/saveNote.ts ----
[DIFF vs GitHub]
--- local:client/src/utils/saveNote.ts
+++ github:client/src/utils/saveNote.ts
@@ -11,10 +11,7 @@
   const res = await fetch(`/api/notes/${id}`, {
     method : 'PATCH',
     headers: { 'Content-Type': 'application/json' },
-    body   : JSON.stringify({ 
-      content: content || undefined,
-      doc_json: docJson || undefined 
-    })
+    body   : JSON.stringify({ content, doc_json: docJson })
   });
 
   if (!res.ok) throw new Error(`Save failed: ${res.status}`);

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
  - /patch URL usage:

---- vite.config.ts ----
[DIFF vs GitHub]

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
  - /patch URL usage:

---- .replit ----
[DIFF vs GitHub]

[LOCAL: line-numbered excerpt of key patterns]
  - updateNote:
  - POST/PATCH /api/notes/:id (server):
  - removeQueries / invalidateQueries / refetchInterval / gcTime (client):
  - /patch URL usage:

=== END VERIFY ===
