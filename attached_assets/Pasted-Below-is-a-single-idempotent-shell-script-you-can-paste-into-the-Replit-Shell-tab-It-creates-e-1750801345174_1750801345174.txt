Below is a single, idempotent shell script you can paste into the Replit ⇢ “Shell” tab.
It creates every new helper file, rewires the router, adds fall‑backs, writes todos/reminders, and cleans the UI – all in one go.

bash
Copy
###############################################################################
#  MIRA Intelligence‑V2 Hot‑Fix  •  copy‑paste this whole block in Replit shell
###############################################################################
set -e

echo "🧠  1)  Add prompt‑specs.ts (single source of truth for GPT schema)"
cat > server/ai/prompt-specs.ts <<'TS'
export const PROMPT = `
SYSTEM: Reply ONLY in this exact JSON. No markdown, no commentary.

{
 "title":      <string>,          // ≤45 chars
 "original":   <string>,          // "" if same as title
 "aiBody":     <string>,          // bullets or paragraph, markdown ok
 "perspective":<string>,          // ≤80 chars why + next prep
 "todos":      <{title:string,priority:"low"|"normal"|"high"}[]>,
 "reminder":   <{timeISO:string,leadMins:number}|null>
}
###
`;
export const buildPrompt = (bio:string, note:string)=>
  PROMPT + `USER_BIO:\n${bio}\nNOTE_TEXT:\n${note}`;
TS

echo "🧠  2)  Add compose‑v2.ts (distills recursive analysis to simple schema)"
cat > server/ai/compose-v2.ts <<'TS'
import { RecursiveAnalysis } from '../intelligence-v2/recursive-reasoning-engine';

export interface RichContext {
  title:string; original?:string; aiBody?:string; perspective?:string;
  todos?:{title:string,priority:"low"|"normal"|"high"}[];
  reminder?:{timeISO:string,leadMins:number}|null;
}

export function composeFromAnalysis(raw:string,a:RecursiveAnalysis|null):RichContext{
  const clean = raw.trim().replace(/\s+/g,' ');
  const title = clean.length<=45 ? clean : clean.slice(0,42)+'…';
  const original = title===clean? "" : raw;

  let bullets:string[] = [];
  if (a?.proactiveDelivery?.suggestedActions){
     bullets = a.proactiveDelivery.suggestedActions
       .filter(x=>!/^Research /i.test(x.action))
       .slice(0,3)
       .map(x=>'• '+x.action);
  }
  if (bullets.length===0 && a?.recursiveReasoning?.step1Anticipation?.likelyNextNeeds){
     bullets.push('• '+a.recursiveReasoning.step1Anticipation.likelyNextNeeds[0]);
  }

  const aiBody = bullets.join('\n');
  const p1 = a?.immediateProcessing?.understanding?.slice(0,80) || '';
  const p2 = a?.recursiveReasoning?.step1Anticipation?.followUpQuestions?.[0] || '';
  const perspective = [p1,p2].filter(Boolean).join('  ');

  return { title, original, aiBody, perspective, todos:[], reminder:null };
}
TS

echo "🧠  3)  Add persist-side-effects.ts (creates todos, reminders, collections)"
cat > server/ai/persist-side-effects.ts <<'TS'
import { storage } from '../storage';
import { RichContext } from './compose-v2';
import { detectTimeReferences } from '../brain/miraAIProcessing';

export async function persistSideEffects(rc:RichContext,noteId:number){
  if (rc.aiBody?.startsWith('•')){
    for (const line of rc.aiBody.split('\n')){
      const ttl=line.replace(/^•\s*/,'').trim();
      if(ttl) await storage.createTodo({title:ttl, noteId});
    }
  }
  const {shouldCreateReminder,extractedTimes}=detectTimeReferences(rc.original||"");
  if(shouldCreateReminder && extractedTimes[0]){
    const dt=new Date(); // simple stub; replace with real parse if needed
    await storage.createReminder({title:rc.title, reminderTime:dt, noteId});
  }
}
TS

echo "🧠  4)  Patch intelligence-router.ts to use new prompt & composer"
sed -i '
/import .*prompt-specs/d
/import .*compose-v2/d
1i\
import { buildPrompt } from "../ai/prompt-specs";\
import { composeFromAnalysis } from "../ai/compose-v2";
' server/intelligence-v2/intelligence-router.ts

# Replace old OpenAI call block (simple pattern replace)
sed -i -E '
/const prompt = /c\
    const prompt = buildPrompt(userProfile.personalBio || "", input.content);
' server/intelligence-v2/intelligence-router.ts

sed -i -E '
/openai\.chat\.completions\.create/,/};/c\
    const gpt = await this.openai.chat.completions.create({\
       model:"gpt-4o", messages:[{role:"system",content:prompt}], temperature:0.4});\
    const analysis = await this.reason.performRecursiveAnalysis(\
       input.content, {}, matches, {});\
    const parsed = composeFromAnalysis(input.content, analysis);\
' server/intelligence-v2/intelligence-router.ts

# Ensure return object is just parsed
sed -i -E '
/return \{/c\
    return { ...parsed, id:input.id??"temp", timestamp:new Date().toISOString(), richContext:parsed };
' server/intelligence-v2/intelligence-router.ts

echo "🧠  5)  Patch routes.ts – update note and persist side‑effects"
sed -i '/const v2Result =/c\        const v2Result = await processWithIntelligenceV2(v2Input);' server/routes.ts
sed -i '/await storage.updateNote(/c\
        const { persistSideEffects } = await import("./ai/persist-side-effects");\
        await persistSideEffects(v2Result, note.id);\
        await storage.updateNote(note.id,{\
          aiGeneratedTitle:v2Result.title,\
          richContext:JSON.stringify(v2Result),\
          aiEnhanced:true,\
          isProcessing:false\
        });' server/routes.ts

echo "🧠  6)  Front‑end NoteDetail fall‑back robustness"
cat > client/src/components/NoteDetailSimple.tsx <<'TSX'
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams, useLocation } from 'wouter';
import { ArrowLeft } from 'lucide-react';
import { NoteWithTodos } from '@shared/schema';

export default function NoteDetailSimple(){
  const { id } = useParams();
  const [,setLoc] = useLocation();
  const {data:note,isLoading}=useQuery<NoteWithTodos>({queryKey:[`/api/notes/${id}`],enabled:!!id});
  if(isLoading||!note) return null;
  const rc = note.richContext? JSON.parse(note.richContext): {};
  const title= rc.title||note.aiGeneratedTitle||note.content.split('\n')[0]||'Untitled';
  const original= rc.original||(title!==note.content? note.content:'' );
  return(
   <div className="min-h-screen bg-[#f1efe8] pb-20">
     <div className="sticky top-0 bg-white border-b px-4 py-3 flex items-center gap-3">
       <button onClick={()=>setLoc('/')} className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center"><ArrowLeft className="w-4 h-4"/></button>
       <h1 className="text-lg font-semibold">{title}</h1>
     </div>
     <div className="space-y-6 px-4 py-6">
       <h1 className="text-2xl font-semibold">{title}</h1>
       {original && <div className="bg-blue-50 p-4 rounded whitespace-pre-wrap text-sm">{original}</div>}
       {rc.aiBody && <pre className="whitespace-pre-wrap text-base">{rc.aiBody}</pre>}
       {rc.perspective && <p className="text-xs text-gray-500 whitespace-pre-wrap">{rc.perspective}</p>}
     </div>
   </div>);
}
TSX

echo "🧠  7)  Point App router to NoteDetailSimple"
sed -i 's/NoteDetail/NoteDetailSimple/' client/src/App.tsx

echo "✅  Patch complete.  Run  ▶  to rebuild & test new notes."
###############################################################################