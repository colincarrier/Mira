Below is a complete, step-by-step “copy-and-paste” guide to spin up your existing Vite + Express PWA on Replit—and configure it so that:
	1.	Vite’s catch-all bug is fully bypassed (so /@vite/client and other module URLs always resolve correctly).
	2.	Your Express API routes co-exist cleanly with Vite’s dev middleware.
	3.	The structure is future-proofed (clear separation of dev vs. prod, proper environment‐variable handling, ready to add new features, etc.).

You can copy each file exactly as shown into your Replit project (overwriting where indicated). Once complete, hitting “Run” in Replit will install dependencies and launch the Vite + Express server on $PORT.

⸻

0) Project Structure Overview

Ensure your Replit project has this folder hierarchy (you can collapse empty folders for readability):

/ (repo root)
├── .replit
├── package.json
├── tsconfig.json
├── vite.config.ts
├── postcss.config.js
├── tailwind.config.ts
├── public/
│   ├── index.html
│   ├── favicon.ico
│   ├── manifest.json
│   └── sw.js
├── client/             
│   ├── src/
│   │   ├── main.tsx
│   │   ├── App.tsx
│   │   ├── components/
│   │   │   └── (React + Tailwind components, e.g. NoteCard.tsx, etc.)
│   │   ├── hooks/
│   │   └── store/
│   └── index.html      # or symlink to ../public/index.html
├── server/
│   ├── index.ts
│   ├── vite.ts        # (unchanged)
│   ├── routes/
│   │   ├── notes.ts
│   │   └── collections.ts
│   ├── lib/
│   │   ├── db.ts
│   │   ├── storage.ts
│   │   └── ai/
│   └── middleware/
│       └── viteBypass.ts
└── shared/
    └── schema.ts

In other words:
	•	client/ holds your Vite-built React app (with src/, React components, Tailwind CSS).
	•	public/ holds static assets (the same index.html Vite serves, plus manifest.json, favicon.ico, sw.js).
	•	server/ holds Express, your API routes, and a tiny middleware that bypasses Vite’s catch-all.
	•	shared/ holds types or Drizzle schemas if you use Postgres.
	•	Root config files (package.json, tsconfig.json, vite.config.ts, etc.) sit at /.

Below, we’ll fill in every file you need.

⸻

1) .replit

At the repo root, create or replace .replit with:

# .replit
language = "nodejs"
run = "npm run dev"

Why?
	•	Tells Replit to use Node.js as the language.
	•	“npm run dev” is the command that starts our combined Vite + Express server (see package.json below).

⸻

2) package.json

At the repo root, replace your existing package.json (or create a new one) with exactly this:

{
  "name": "mira-vite-express",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    // Start in development: run Express + Vite in middleware mode
    "dev": "ts-node-transpile-only server/index.ts",

    // Build both client and server for production
    "build:client": "cd client && npm install && npm run build",
    "build:server": "tsc -p server/tsconfig.json",
    "build": "npm run build:client && npm run build:server",

    // Start production server (after build)
    "start": "node dist/server/index.js"
  },
  "dependencies": {
    "express": "^4.21.2",
    "vite": "5.4.14",
    "@vitejs/plugin-react": "4.3.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.0",
    "nanoid": "^4.0.0",
    "pg": "^8.11.0",
    "drizzle-orm": "^1.0.0",
    "postgres": "^3.0.0",
    "@anthropic-ai/sdk": "^0.6.0",
    "openai": "^4.0.0",
    "date-fns": "^2.30.0",
    "zod": "^3.22.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "ts-node": "^10.9.1",
    "ts-node-transpile-only": "^10.9.1",
    "@types/express": "^4.17.17",
    "@types/node": "^20.5.1",
    "tailwindcss": "^3.0.0",
    "postcss": "^8.0.0",
    "autoprefixer": "^10.0.0",
    "eslint": "^8.0.0",
    "prettier": "^2.0.0"
  }
}

Explanation of key fields:
	•	dev runs server/index.ts via ts-node-transpile-only. In development, that file will import Vite’s middleware and launch Express on $PORT.
	•	build:client and build:server let you produce separate client and server bundles for production.
	•	start runs the compiled server code (in dist/server/index.js) after you build.
	•	We pin Vite to 5.4.14 and React plugin @vitejs/plugin-react to 4.3.3 to match your existing versions.

After copying that in, Replit will automatically run npm install once you hit “Run” or open the Shell.

⸻

3) tsconfig.json (root)

Create or replace tsconfig.json at the root with:

{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["DOM", "ESNext"],
    "module": "CommonJS",
    "moduleResolution": "Node",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "dist/server",
    "rootDir": "server",
    "resolveJsonModule": true,
    "allowJs": false,
    "noEmit": false
  },
  "include": ["server/**/*"],
  "exclude": ["node_modules", "dist"]
}

Why?
	•	The server’s TypeScript compiles into dist/server.
	•	We only include server/**/* here—your client code (under client/) uses its own Vite/TS setup.
	•	This ensures that npm run build:server (i.e. tsc -p server/tsconfig.json) compiles only your backend files.

⸻

4) postcss.config.js

At the root, create (or replace) postcss.config.js:

// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


⸻

5) tailwind.config.ts

At the root, create (or replace) tailwind.config.ts:

import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: "class",
  content: [
    "./client/index.html",
    "./client/src/**/*.{js,ts,jsx,tsx}",
    "./server/**/*.{js,ts}"
  ],
  theme: {
    extend: {
      colors: {
        "mira-primary": "#1E9BF0",
        "mira-primary-hover": "#0EA5E9",
        "mira-bg-primary": "#F5F7FA",
        "mira-bg-secondary": "#FFFFFF",
        "mira-text-primary": "#2A3441",
        "mira-text-secondary": "#7A8FA3",
        "mira-border-primary": "#E8EBF0",
        // add any other custom colors exactly as in your old app
      },
      fontFamily: {
        inter: ["Inter", "sans-serif"],
      },
    },
  },
  plugins: [require("@tailwindcss/line-clamp")],
};

export default config;

Why?
	•	content points to both your Vite client files (client/src/**/*.tsx) and any server-rendered files you might embed Tailwind classes into.
	•	We re-declare your brand colors and typography to match the old pixel-perfect design.

⸻

6) vite.config.ts

At the root, create or replace vite.config.ts with:

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

export default defineConfig(({ mode }) => ({
  root: path.resolve(__dirname, "client"),
  base: "/",
  server: {
    port: 5173,
    strictPort: false,
    watch: {
      usePolling: true,
    },
  },
  build: {
    outDir: path.resolve(__dirname, "dist/client"),
    emptyOutDir: true,
    sourcemap: mode === "development",
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client/src"),
    },
  },
  plugins: [react()],
}));

Why?
	•	root: "client" tells Vite where your React app lives.
	•	outDir: "dist/client" outputs the production build into dist/client.
	•	We set sourcemap in dev so you can debug easily.
	•	We add an alias @ → client/src so your React imports can use @/components/….

⸻

7) public/index.html

Under /public/index.html, make sure you have an HTML file that Vite will transform. For example:

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>Mira (Vite + Express)</title>
    <link rel="icon" href="/favicon.ico" />

    <!-- Tailwind base CSS (will be injected by Vite) -->
    <script type="module" src="/src/main.tsx"></script>
  </head>
  <body class="bg-mira-bg-primary font-inter">
    <div id="root"></div>
  </body>
</html>

Why?
	•	This is the HTML template that Vite’s vite.transformIndexHtml will pick up.
	•	The <script type="module" src="/src/main.tsx"> is replaced by Vite to load your React bundle.

⸻

8) server/middleware/viteBypass.ts

Create a new file at server/middleware/viteBypass.ts. This is the small Express middleware that skips Vite’s catch-all when the URL is a Vite client or static asset:

// server/middleware/viteBypass.ts
import { Request, Response, NextFunction } from "express";

export function viteBypass(req: Request, res: Response, next: NextFunction) {
  const url = req.originalUrl;

  // If URL is requesting Vite’s HMR client or any .js/.css/.map modules…
  if (
    url.startsWith("/@vite/") ||
    url.endsWith(".js") ||
    url.endsWith(".ts") ||
    url.endsWith(".tsx") ||
    url.endsWith(".jsx") ||
    url.endsWith(".css") ||
    url.endsWith(".map") ||
    url.endsWith(".json")
  ) {
    // Skip ahead to Vite’s middleware without hitting the HTML fallback
    return next("route");
  }

  // Otherwise, proceed normally (will eventually hit Vite’s index.html fallback)
  return next();
}

Why?
	•	This middleware is mounted just before Vite’s own vite.middlewares in server/index.ts.
	•	When we call next("route"), Express skips the next app.use("*", ...) in vite.ts that returns HTML, forcing Vite’s own middleware to handle JS/CSS requests correctly.

⸻

9) server/vite.ts (UNCHANGED)

Since you explicitly cannot modify this file, re-upload your exact existing server/vite.ts. It should look like:

// server/vite.ts  (NO EDITS here)
import { createServer as createViteServer } from "vite";
import express, { type Express } from "express";
import fs from "fs";
import path from "path";
import { nanoid } from "nanoid";

export async function setupVite(app: Express, server: any) {
  const vite = await createViteServer({
    server: { middlewareMode: true },
    appType: "custom",
  });
  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

Reminder:
	•	Do not edit any line inside setupVite. We will work around it in server/index.ts.

⸻

10) server/index.ts

Create or replace server/index.ts exactly with:

// server/index.ts
import express, { Express, Request, Response, NextFunction } from "express";
import cors from "cors";
import dotenv from "dotenv";
import path from "path";
import { setupVite } from "./vite";
import { viteBypass } from "./middleware/viteBypass";
import { registerRoutes } from "./routes";

// Load .env from the project root
dotenv.config();

// Create Express app
const app: Express = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// 1) API Routes (Mount before Vite)
await registerRoutes(app);

// 2) In development, mount Vite + bypass
if (app.get("env") === "development") {
  // Bypass middleware: skip Vite’s HTML fallback for any /@vite or .js/.css requests
  app.use(viteBypass);

  // Now set up Vite in middleware mode (this will mount vite.middlewares and the catch-all)
  await setupVite(app, null);
} else {
  // In production, serve the built client files from dist/client
  const clientDist = path.resolve(__dirname, "../dist/client");
  app.use(express.static(clientDist));

  // Any other GET should serve index.html (for client-side routing)
  app.get("*", (req: Request, res: Response) => {
    res.sendFile(path.join(clientDist, "index.html"));
  });
}

// 3) Start server on Replit’s $PORT (or fallback to 5000)
const PORT = process.env.PORT ?? 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server listening on port ${PORT}`);
});

Key points:
	•	We mount registerRoutes(app) before Vite in dev mode. That ensures /api/* endpoints are caught first.
	•	We then mount viteBypass so that requests for /@vite/client, .js, .css, etc., go straight to vite.middlewares (skipping Vite’s HTML fallback).
	•	Finally we call await setupVite(app, null). Because viteBypass “short-circuits” any module URL, Vite’s catch-all (app.use("*", ...)) only ever returns HTML for actual page routes (e.g. /dashboard, /notes/123).
	•	In production (NODE_ENV !== "development"), we serve static files from dist/client and fallback to index.html (no Vite involved).

⸻

11) server/routes/index.ts

Create server/routes/index.ts to gather and mount your individual API-route files:

// server/routes/index.ts
import { Express, Request, Response, NextFunction } from "express";
import notesRouter from "./notes";
import collectionsRouter from "./collections";

// Optionally add other routers: todosRouter, authRouter, etc.

export async function registerRoutes(app: Express) {
  // Example: GET /api/health → simple health check
  app.get("/api/health", (req: Request, res: Response) => {
    res.json({ status: "ok", timestamp: new Date() });
  });

  // Notes endpoints
  app.use("/api/notes", notesRouter);

  // Collections endpoints
  app.use("/api/collections", collectionsRouter);

  // TODO: mount other routers here (e.g. /api/todos, /api/auth, /api/ai)

  // 404 handler for unknown API routes
  app.use("/api/*", (req: Request, res: Response) => {
    res.status(404).json({ error: "API route not found" });
  });

  return app;
}


⸻

12) server/routes/notes.ts

Create server/routes/notes.ts:

// server/routes/notes.ts
import { Router, Request, Response, NextFunction } from "express";
import {
  createNote,
  getNotesByCollection,
  getNoteById,
  updateNote,
  deleteNote,
} from "../lib/storage";

// Create a new Router
const router = Router();

// GET /api/notes?collectionId=#
router.get("/", async (req: Request, res: Response, next: NextFunction) => {
  try {
    const collectionId = parseInt((req.query.collectionId as string) || "0", 10);
    const notes = await getNotesByCollection(collectionId);
    res.json(notes);
  } catch (err) {
    next(err);
  }
});

// GET /api/notes/:id
router.get("/:id", async (req: Request, res: Response, next: NextFunction) => {
  try {
    const id = parseInt(req.params.id, 10);
    const note = await getNoteById(id);
    if (!note) return res.status(404).json({ error: "Not found" });
    res.json(note);
  } catch (err) {
    next(err);
  }
});

// POST /api/notes
router.post("/", async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { title, content, collectionId } = req.body as {
      title: string;
      content: string;
      collectionId: number;
    };
    if (!title || !content || !collectionId) {
      return res.status(400).json({ error: "Missing fields" });
    }
    const newNote = await createNote(title, content, collectionId);
    res.status(201).json(newNote);
  } catch (err) {
    next(err);
  }
});

// PUT /api/notes/:id
router.put("/:id", async (req: Request, res: Response, next: NextFunction) => {
  try {
    const id = parseInt(req.params.id, 10);
    const { title, content } = req.body as Partial<{
      title: string;
      content: string;
    }>;
    const updated = await updateNote(id, {
      ...(title !== undefined ? { title } : {}),
      ...(content !== undefined ? { content } : {}),
    });
    if (!updated) return res.status(404).json({ error: "Not found" });
    res.json(updated);
  } catch (err) {
    next(err);
  }
});

// DELETE /api/notes/:id
router.delete("/:id", async (req: Request, res: Response, next: NextFunction) => {
  try {
    const id = parseInt(req.params.id, 10);
    await deleteNote(id);
    res.json({ success: true });
  } catch (err) {
    next(err);
  }
});

export default router;


⸻

13) server/routes/collections.ts

Create server/routes/collections.ts:

// server/routes/collections.ts
import { Router, Request, Response, NextFunction } from "express";
import { createCollection, getCollections, getCollectionById } from "../lib/storage";

const router = Router();

// GET /api/collections
router.get("/", async (req: Request, res: Response, next: NextFunction) => {
  try {
    const all = await getCollections();
    res.json(all);
  } catch (err) {
    next(err);
  }
});

// GET /api/collections/:id
router.get("/:id", async (req: Request, res: Response, next: NextFunction) => {
  try {
    const id = parseInt(req.params.id, 10);
    const col = await getCollectionById(id);
    if (!col) return res.status(404).json({ error: "Not found" });
    res.json(col);
  } catch (err) {
    next(err);
  }
});

// POST /api/collections
router.post("/", async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { name, color } = req.body as { name: string; color?: string };
    if (!name) {
      return res.status(400).json({ error: "Missing name" });
    }
    const newCol = await createCollection(name, color);
    res.status(201).json(newCol);
  } catch (err) {
    next(err);
  }
});

export default router;


⸻

14) server/lib/db.ts

Create server/lib/db.ts to initialize Postgres via Drizzle:

// server/lib/db.ts
import postgres from "postgres";
import { drizzle } from "drizzle-orm/postgres-js";
import { notes, collections, todos } from "@/shared/schema";

const DATABASE_URL = process.env.DATABASE_URL!;
if (!DATABASE_URL) {
  throw new Error("❌ Please define DATABASE_URL in environment");
}

export const sql = postgres(DATABASE_URL, {
  ssl: { rejectUnauthorized: false },
});
export const db = drizzle(sql, { schema: { notes, collections, todos } });

Why?
	•	Connects to Postgres using the DATABASE_URL from Replit’s Secrets.
	•	You can now import db in storage.ts.

⸻

15) server/lib/storage.ts

Create server/lib/storage.ts—your CRUD logic that uses Drizzle:

// server/lib/storage.ts
import { db } from "./db";
import { notes, collections, todos } from "@/shared/schema";

export async function createCollection(name: string, color: string = "#3B82F6") {
  const result = await db.insert(collections).values({ name, color }).returning();
  return result[0];
}

export async function getCollections() {
  return db.select().from(collections).all();
}

export async function getCollectionById(id: number) {
  const result = await db.select().from(collections).where(collections.id.eq(id));
  return result.length ? result[0] : undefined;
}

export async function createNote(
  title: string,
  content: string,
  collectionId: number
) {
  const result = await db
    .insert(notes)
    .values({ title, content, collectionId })
    .returning();
  return result[0];
}

export async function getNotesByCollection(collectionId: number) {
  if (collectionId === 0) {
    return db.select().from(notes).all();
  }
  return db
    .select()
    .from(notes)
    .where(notes.collectionId.eq(collectionId))
    .all();
}

export async function getNoteById(id: number) {
  const result = await db.select().from(notes).where(notes.id.eq(id));
  return result.length ? result[0] : undefined;
}

export async function updateNote(
  id: number,
  data: Partial<{ title: string; content: string }>
) {
  const updates: any = {};
  if (data.title !== undefined) updates.title = data.title;
  if (data.content !== undefined) updates.content = data.content;
  const result = await db
    .update(notes)
    .set(updates)
    .where(notes.id.eq(id))
    .returning();
  return result.length ? result[0] : undefined;
}

export async function deleteNote(id: number) {
  await db.delete(notes).where(notes.id.eq(id));
}

export async function createTodo(
  noteId: number,
  text: string,
  done: boolean = false
) {
  const result = await db
    .insert(todos)
    .values({ noteId, text, done: done ? "true" : "false" })
    .returning();
  return result[0];
}

export async function getTodosByNote(noteId: number) {
  if (noteId === 0) {
    return db.select().from(todos).all();
  }
  return db.select().from(todos).where(todos.noteId.eq(noteId)).all();
}

export async function toggleTodo(id: number, done: boolean) {
  const result = await db
    .update(todos)
    .set({ done: done ? "true" : "false" })
    .where(todos.id.eq(id))
    .returning();
  return result.length ? result[0] : undefined;
}

export async function deleteTodo(id: number) {
  await db.delete(todos).where(todos.id.eq(id));
}


⸻

16) shared/schema.ts

Create (or replace) shared/schema.ts with Drizzle’s table definitions:

// shared/schema.ts
import {
  pgTable,
  serial,
  varchar,
  text,
  timestamp,
} from "drizzle-orm/pg-core";

export const collections = pgTable("collections", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 100 }).notNull(),
  color: varchar("color", { length: 20 }).default("'#3B82F6'").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const notes = pgTable("notes", {
  id: serial("id").primaryKey(),
  collectionId: serial("collection_id")
    .references(() => collections.id)
    .notNull(),
  title: varchar("title", { length: 255 }).notNull(),
  content: text("content").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const todos = pgTable("todos", {
  id: serial("id").primaryKey(),
  noteId: serial("note_id").references(() => notes.id).notNull(),
  text: varchar("text", { length: 255 }).notNull(),
  done: varchar("done", { length: 5 }).default("false").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

Why?
	•	Defines tables exactly as before so that your SQL migrations (if any) match.
	•	collectionId, noteId enforce referential integrity.

⸻

17) client/index.html

Inside client/, create or replace client/index.html exactly with:

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
    />
    <title>Mira – PWA (Vite + Express)</title>
    <link rel="icon" href="/favicon.ico" />
    <link rel="manifest" href="/manifest.json" />
  </head>
  <body class="bg-mira-bg-primary dark:bg-mira-dark-bg-primary font-inter antialiased">
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

Why?
	•	Mirrors your old public/index.html but now sits under client/.
	•	Vite will transform this when serving in dev mode.

⸻

18) client/src/main.tsx

Under client/src/main.tsx, copy:

// client/src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css"; // imports Tailwind base, components, utilities

const rootElement = document.getElementById("root");
if (!rootElement) throw new Error("Root element not found");
ReactDOM.createRoot(rootElement).render(<App />);


⸻

19) client/src/index.css

Under client/src/index.css, copy:

/* client/src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Any global resets or overrides from your old app */


⸻

20) client/src/App.tsx

Under client/src/App.tsx, paste (this is a minimal shell that loads your React router / pages; adjust your imports if needed):

// client/src/App.tsx
import React from "react";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Home from "./pages/Home";
import NoteDetail from "./pages/NoteDetail";
import CollectionDetail from "./pages/CollectionDetail";

export default function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/notes/:id" element={<NoteDetail />} />
        <Route path="/collections/:id" element={<CollectionDetail />} />
        {/* Add other routes (Settings, Todos, etc.) */}
      </Routes>
    </BrowserRouter>
  );
}

Why?
	•	If your original Vite app used React Router, this restores routing.
	•	Adjust to your own component names in client/src/pages/….

⸻

21) Example React Pages & Components

Below are examples. You’ll need to copy your existing code inside client/src/pages and client/src/components, but ensure they use the @/… alias (which Vite will resolve to client/src/). For future proof, we recommend that every import inside client/src uses either a relative path or the alias @. For example:

// client/src/pages/Home.tsx
import React, { useState, useEffect } from "react";
import { NoteCard } from "@/components/NoteCard";
import { getNotesByCollection } from "@/api/notes"; // see below
import { getCollections } from "@/api/collections";
import { BottomNavigation } from "@/components/BottomNavigation";

export default function Home() {
  // same logic as your original, but using fetch("/api/notes...")
  // ...
}

You do not need to modify these if they already worked before—just be sure that the file paths, CSS classes, and component names match your old design.

⸻

22) API-Fetch Helpers (Optional)

Rather than fetch directly from React components, you may want a small client/src/api/… folder with helpers that talk to your Express API. For example:

// client/src/api/notes.ts
export async function fetchNotes(collectionId = 0) {
  const res = await fetch(`/api/notes?collectionId=${collectionId}`);
  if (!res.ok) throw new Error("Failed to fetch notes");
  return res.json();
}

export async function fetchNoteById(id: number) {
  const res = await fetch(`/api/notes/${id}`);
  if (!res.ok) throw new Error("Failed to fetch note");
  return res.json();
}

export async function postNote(title: string, content: string, collectionId: number) {
  const res = await fetch(`/api/notes`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ title, content, collectionId }),
  });
  if (!res.ok) throw new Error("Failed to create note");
  return res.json();
}

// etc.

// client/src/api/collections.ts
export async function fetchCollections() {
  const res = await fetch("/api/collections");
  if (!res.ok) throw new Error("Failed to fetch collections");
  return res.json();
}

export async function postCollection(name: string, color: string) {
  const res = await fetch("/api/collections", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ name, color }),
  });
  if (!res.ok) throw new Error("Failed to create collection");
  return res.json();
}

Why?
	•	Keeps your React components cleaner (they call fetchNotes() instead of writing raw fetch("/api/notes")).
	•	You only need to adjust these helper files in one place if your API paths change.

⸻

23) Production Build Steps

When you’re ready to build for production (e.g. to deploy to Replit “Always On” or another host), run:

npm run build

This does:
	1.	npm run build:client
	•	cd client && npm install && npm run build
	•	That executes Vite’s build command inside client/, producing a static build under dist/client.
	2.	npm run build:server
	•	Runs tsc -p server/tsconfig.json to compile all server TS into dist/server.

Afterward, you can start the production server with:

npm run start

It will launch dist/server/index.js on $PORT and serve the static files from dist/client. All your environment variables (DATABASE_URL, OPENAI_API_KEY, etc.) should be set in Replit’s Secrets.

⸻

24) Environment Variables (Replit Secrets)

Open Replit’s “Secrets” tab (🔒) and set:
	•	DATABASE_URL → your Postgres connection string.
	•	OPENAI_API_KEY → for LLM calls.
	•	ANTHROPIC_API_KEY → for Claude calls.
	•	(Any other secret, e.g. JWT_SECRET if you implement auth.)
	•	Note: Replit automatically injects PORT at runtime, so you don’t need to set it manually.

⸻

25) Final Checklist
	1.	File placement matches the structure above.
	2.	Dependencies installed (npm install or Replit auto-install).
	3.	Replit’s .replit uses npm run dev.
	4.	server/index.ts is exactly as shown (with viteBypass middleware).
	5.	server/vite.ts is unmodified.
	6.	vite.config.ts points at client/ and outputs to dist/client.
	7.	React code in client/src/ uses @ aliases, Tailwind classes, and calls /api/... endpoints.
	8.	Tailwind classes and config match your original UI for pixel perfection.
	9.	API-Fetch helpers (optional) are placed in client/src/api/.
	10.	Secrets are set in Replit: DATABASE_URL, OPENAI_API_KEY, etc.

Once all of the above are in place, click Run in Replit. You should see:
	•	Express start on, e.g., port 3000.
	•	Vite dev server in middleware mode (HMR enabled).
	•	Visiting your Replit URL (e.g. https://mira-vite-express.username.replit.app) loads the app.
	•	Opening DevTools Network → we see /@vite/client and .js files served as JavaScript modules (no MIME-type error).
	•	Typing /api/notes returns JSON from your Express routes.
	•	Your React components load and display exactly as before.

That completes a “sticks with Vite” setup and is fully future-proofed (dev vs. prod, environment variables, aliasing, TypeScript, Drizzle ORM, and a clear performance separation). If you need to add new API endpoints or swap in a different database, you can do so under server/routes/*.ts and server/lib/*.ts without touching your Vite build.

Happy coding!