###############################################################################
#  MIRA  ▸  INTELLIGENCE‑V2  BULLET‑PROOF PATCH  (≈30 s)                       #
###############################################################################
set -e

echo "🔑 1) unlock port 5000 & git lock (if any)"
fuser -k 5000/tcp || true
rm -f .git/index.lock 2>/dev/null || true

echo "📦 2) ensure .env is loaded at runtime (dotenv import)"
grep -q "dotenv/config" server/index.ts || \
  sed -i '1s;^;import "dotenv/config";\n;' server/index.ts

echo "🪢 3) add missing flags to FeatureFlags interface"
grep -q ENHANCED_COLLECTIONS_ENABLED server/intelligence-v2/feature-flags.ts || \
  sed -i '6,$ s/PROACTIVE_DELIVERY_ENABLED: boolean;/PROACTIVE_DELIVERY_ENABLED: boolean;\
  ENHANCED_COLLECTIONS_ENABLED: boolean;\
  ADVANCED_NOTIFICATIONS_ENABLED: boolean;/' \
  server/intelligence-v2/feature-flags.ts

echo "🪢 4) load env vars into FEATURE_FLAGS map"
cat > server/feature-flags-runtime.ts <<'EOF'
/* runtime flag helper autogenerated 2025‑06‑22 */
export const FEATURE_FLAGS = {
  INTELLIGENCE_V2_ENABLED:        process.env.FEATURE_INTELLIGENCE_V2 !== 'false',
  VECTOR_SEARCH_ENABLED:          process.env.FEATURE_VECTOR_SEARCH   !== 'false',
  RECURSIVE_REASONING_ENABLED:    process.env.FEATURE_RECURSIVE_REASONING !== 'false',
  RELATIONSHIP_MAPPING_ENABLED:   process.env.FEATURE_RELATIONSHIP_MAPPING !== 'false',
  PROACTIVE_DELIVERY_ENABLED:     process.env.FEATURE_PROACTIVE_DELIVERY   !== 'false',
  ENHANCED_COLLECTIONS_ENABLED:   process.env.FEATURE_ENHANCED_COLLECTIONS !== 'false',
  ADVANCED_NOTIFICATIONS_ENABLED: process.env.FEATURE_ADVANCED_NOTIFICATIONS !== 'false',
} as const;
EOF

echo "🔧 5) replace broken V2 router with clean version"
cat > server/intelligence-v2/intelligence-router.ts <<'EOF'
import OpenAI from 'openai';
import { VectorEngine } from './vector-engine.js';
import { RecursiveReasoningEngine } from './recursive-reasoning-engine.js';
import { IntentVectorClassifier, type IntentVector } from './intent-vector-classifier.js';
import { CollectionsExtractor } from './collections-extractor.js';
import { FEATURE_FLAGS } from '../feature-flags-runtime.js';
import { storage } from '../storage.js';
import { makeTitle } from '../utils/title-governor.js';

export interface IntelligenceV2Input { id?:string; content:string; mode:'text'|'voice'|'image'|'file'; }
export interface IntelligenceV2Result { id:string; title:string; summary:string; enhancedContent:string; timestamp:string; }

export class IntelligenceV2Router {
  private vector:VectorEngine; private reason:RecursiveReasoningEngine;
  constructor(openai:OpenAI){ this.vector=new VectorEngine(openai); this.reason=new RecursiveReasoningEngine(openai,this.vector); }

  async processNoteV2(input:IntelligenceV2Input):Promise<IntelligenceV2Result>{
    const intent:IntentVector = await IntentVectorClassifier.classify(input.content);
    const notes=await storage.getAllNotes();
    const matches=await this.vector.performSemanticSearch({query:input.content,limit:10},notes);

    if(FEATURE_FLAGS.ENHANCED_COLLECTIONS_ENABLED){
      await CollectionsExtractor.extract(input.id??'',input.content);
    }

    let analysis; if(FEATURE_FLAGS.RECURSIVE_REASONING_ENABLED){
      try{analysis=await this.reason.performRecursiveAnalysis(input.content,{},matches,{});}catch(e){console.warn('Recursion failed',e);}
    }

    if(input.id){ this.vector.updateNoteVectors(Number(input.id),input.content,storage).catch(()=>{}); }

    return{
      id:input.id??'temp',
      title:makeTitle(input.content),
      summary:analysis?.immediateProcessing?.understanding ?? 'Intelligence‑V2 processed',
      enhancedContent:input.content,
      timestamp:new Date().toISOString()
    };
  }
}

/* singleton + helper export */
const openai=new OpenAI({apiKey:process.env.OPENAI_API_KEY!});
const singleton=new IntelligenceV2Router(openai);
export async function processWithIntelligenceV2(i:IntelligenceV2Input){ return singleton.processNoteV2(i);}
export default singleton;
EOF

echo "🖊 6) title‑governor util (if missing)"
mkdir -p server/utils
cat > server/utils/title-governor.ts <<'EOF'
export const makeTitle = (raw:string):string=>{
  const clean=raw.trim().replace(/\s+/g,' ');
  return clean.length>55? clean.slice(0,52)+'…' : (clean||'Untitled');
};
EOF

echo "🛠 7) pgvector migration file"
mkdir -p drizzle
cat > drizzle/20250622_pgvector.sql <<'SQL'
CREATE EXTENSION IF NOT EXISTS vector;
ALTER TABLE notes
  ALTER COLUMN vectorDense TYPE vector(1536) USING vectorDense::vector,
  ALTER COLUMN vectorSparse TYPE vector(1536) USING vectorSparse::vector;
SQL

echo "🖼 8) null‑safe thumbnail block in client (no build break if path absent)"
if [ -f client/src/components/NoteCard.tsx ]; then
  sed -i '/const richContext/,+3c\
const rich = note.richContext ? JSON.parse(note.richContext) : null;\
' client/src/components/NoteCard.tsx 2>/dev/null || true

  grep -q "rich?.thumbnails" client/src/components/NoteCard.tsx || \
  sed -i '/<\/header>/a\
{rich?.thumbnails?.length > 0 && (\
  <div className="flex gap-1 mb-2">\
    {rich.thumbnails.slice(0,3).map((u,i)=>(<img key={i} src={u} className="h-16 w-16 object-cover rounded"/>))}\
  </div>\
)}' client/src/components/NoteCard.tsx 2>/dev/null || true
fi

echo "📜 9) vector parse fix (ensure pgvector literal) "
sed -i 's/note.vectorDense.startsWith/\//note.vectorDense.startsWith/; s/trimmed = note.vectorDense.*/const trimmed=note.vectorDense.replace(/[{}]/g,\"\");/' \
  server/intelligence-v2/vector-engine.ts 2>/dev/null || true

echo "✅ 10) (optional) git commit if repo exists"
[ -d .git ] && git add . && git commit -m "patch: env loader, flags, router, pgvector, ui safeguards" || true

echo "🏗 11) apply DB migration"
npx drizzle-kit push 2>/dev/null || true

echo "🚀 12) start dev server"
PORT=5000 NODE_ENV=development tsx server/index.ts &
sleep 5
echo "ℹ️  curl test:"
curl -s -X POST http://localhost:5000/api/notes \
     -H "Content-Type: application/json" \
     -d '{"content":"Buy flowers for mom tomorrow 2pm","mode":"text"}' | head -c 300
echo
echo "✔  All done – watch the log for 'Intelligence‑V2 processed'."
###############################################################################
